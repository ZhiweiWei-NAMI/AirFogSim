
simulation:
  vehicle_count: 200
  max_simulation_time: 200
  simulation_interval: 0.1 # in seconds, for transmission, computation, task generation and assignment, etc.
  traffic_interval: 0.5 # in seconds, for traffic simulation. Remember to set the same value in the SUMO configuration file; otherwise, the simulation will not work properly
  

sumo:
  sumo_config: "./sumo_wujiaochang/osm.sumocfg"
  sumo_osm: "./sumo_wujiaochang/osm_bbox.osm.xml"
  sumo_net: "./sumo_wujiaochang/osm.net.xml"
  sumo_port: 8813
  export_tripinfo: False # 如果true，则导出tripinfo.xml文件（很大）
  tripinfo_output: "./sumo_wujiaochang/tripinfo.xml"

visualization:
  icon_path: "./icon"

traffic:
  traffic_mode: "real" # "real" or "SUMO"
  tripinfo: "./sumo_wujiaochang/tripinfo.csv" # The path to the SUMO tripinfo file
  traffic_interval: 0.5 # in seconds, for traffic simulation. Remember to set the same value in the SUMO configuration file; otherwise, the simulation will not work properly
  UAV_z_range: [100, 100] # The range of z coordinates for UAVs
  UAV_speed_range: [30,30] # The speed of UAV (distance unit per timeslot)
  vehicle_traffic_file: "path/to/vehicle_traffic_file.csv" # Only required if mode is "real". The format should be in accordance with the SUMO vehicle file format
  uav_traffic_file: "path/to/uav_traffic_file.csv" # UAV traffic file
  max_n_vehicles: 100 # Number of vehicles to simulate
  max_n_UAVs: 10 # Number of UAVs to simulate. UAVs are randomly generated in the simulation area initially
  RSU_positions: [[100, 100, 0], [100, 2000, 0], [2500, 100, 0], [2500, 2000, 0]] # List of RSU positions, each RSU is represented by a list of x, y, z coordinates
  max_n_cloudServers: 1 # Number of cloud servers
  arrival_lambda: 1 # The rate at which vehicles arrive at the network per second (in Poisson distribution)
  distance_threshold: 50 # The distance threshold to check if the node is reach target position

task: # default task profile for all nodes
  task_generation_model: "Poisson" # supported model:['Poisson', 'Uniform', 'Normal', 'Exponential']
  task_generation_kwargs:
      lambda: 1 # Poission -> lambda; Uniform -> low, high; Normal -> mean, std; Exponential -> beta
  cpu_model: "Uniform" # supported model:['Uniform', 'Normal']
  cpu_model_kwargs:
    low: 0.5
    high: 1
  size_model: "Uniform" # supported model:['Uniform', 'Normal']
  size_model_kwargs:
    low: 0.5
    high: 1
  deadline_model: "Uniform" # supported model:['Uniform', 'Normal']
  deadline_model_kwargs:
    low: 0.5
    high: 1
  priority_model: "Uniform" # supported model:['Uniform', 'Normal']
  priority_model_kwargs:
    low: 0.5
    high: 1

task_profile: # task profile for each node type
  task_node_gen_poss: 0.5 # The possibility of generating a task node when inializing the node
  task_node_profiles: [{'type':'UAV', 'max_node_num': 15}, {'type':'vehicle', 'max_node_num': 10}] # The types of task nodes and the maximum number of nodes of each type
  vehicle: # The profile of vehicles
    lambda: 1
  uav: # The profile of UAVs
    lambda: 1

fog_profile:
  vehicle:
    cpu: 1 # CPU capacity of vehicles
    memory: 1 # Memory capacity of vehicles
    storage: 1 # Storage capacity of vehicles
  uav:
    cpu: 1 # CPU capacity of UAVs
    memory: 1 # Memory capacity of UAVs
    storage: 1 # Storage capacity of UAVs
  rsu:
    cpu: 1 # CPU capacity of RSUs
    memory: 1 # Memory capacity of RSUs
    storage: 1 # Storage capacity of RSUs
  cloud:
    cpu: 1 # CPU capacity of cloud servers
    memory: 1 # Memory capacity of cloud servers
    storage: 1 # Storage capacity of cloud servers

state_attribute:
  fog_node_state_attributes: ['position_x', 'position_y', 'position_z', 'speed', 'fog_profile', 'node_type']
  task_node_state_attributes: ['position_x', 'position_y', 'position_z', 'speed', 'task_profile', 'node_type']
  task_state_attributes: ['task_node_id', 'task_size', 'task_cpu', 'required_returned_size', 'task_deadline', 'task_priority', 'task_arrival_time']

channel:
  outage_model: 'Rayleigh' # supported model:['Rayleigh'], further implementation can be added in airfogsim/channel_callback/*_callback.py
  outage_snr_threshold: 10 # The SNR threshold for outage detection
  V2V:
    pathloss_model: 'V2V_urban_tr37885'
    shadowing_model: '3GPP_LogNormal'
    fastfading_model: 'Rayleigh'
  V2I:
    pathloss_model: 'UMa_LOS_tr38901'
    shadowing_model: '3GPP_LogNormal'
    fastfading_model: 'Rayleigh'
  V2U:
    pathloss_model: 'free_space'
    shadowing_model: '3GPP_LogNormal'
    fastfading_model: 'Rayleigh'
  U2I:
    pathloss_model: 'free_space'
    shadowing_model: '3GPP_LogNormal'
    fastfading_model: 'Rayleigh'
  U2U:
    pathloss_model: 'free_space'
    shadowing_model: '3GPP_LogNormal'
    fastfading_model: 'Rayleigh'
  I2I:
    pathloss_model: 'free_space'
    shadowing_model: '3GPP_LogNormal'
    fastfading_model: 'Rayleigh'

sensing:
  sensors_per_node: 4 # The maximum number of sensors on a node
  node_type: ['UAV','vehicle']
  sensor_type_num: 4

mission:
  UAV_height: 100
  TTL_range: [100,200]
  duration_range: [5,10]
  mission_size_range: [10,20]
  sensor_accuracy_range: [0,1]
  distance_threshold: 150
  predictable_seconds: 2
  mission_generation_model: "Poisson" # supported model:['Poisson', 'Uniform', 'Normal', 'Exponential']
  generation_model_args:
    Poisson:
      lambda: 1
    Uniform:
      low: 0
      high: 1
    Normal:
      mean: 0
      std: 1
    Exponential:
      beta: 1

energy:
  initial_energy_range: [48000,52000]
  fly_unit_cost: 2.5
  hover_unit_cost: 1.2
  sensing_unit_cost: 0.5
  receive_unit_cost: 0.1
  send_unit_cost: 0.1


